
env:
    global:
        - secure: "ZBt9ru/wVYQrhaLYCCyR2e2dVQmqZZvR6oJ3vnO5ip/OxMttvzusS+63wv+pDcQOcs+eTL0K6jH2s5+Hcbm85AxWQpx0BlJo8T64g8v6k8z7wQfXAwsfrSVlOG6sjcbw7vgbU0AtLs5UhHLHHLfGhPn7KSIVB0uN8xSYbcI9CWc3l02y+4B0PAnoSO1JsZN4BZwEXMvhJxQylTxr0hcWPgwIoAHTpVhXEvOxwrsSeA44dzcjjGDFJQAuoUfipOXbJn2+jpKtD07nCv/6uBV3mrKTJhRWETJNtOduWZRTlUdr5vMu99gIeDtspcM5jjX7+ymBd2egVhu5h97UPPLRps920tPT+QAHMNebJadnq/+PqFm0M1Zjqe/1gEery2ArATK0UWv7Mry7yTjpWLVE8m9CKLcI89lTxAy7OleySBzNCyzK133fRI3/7qRFVk6tPPnTpi8U6z7bAQXWFC9gEk1/X1DAFTlJ3UXS/tmNNdDTR4rYEXKEegz0zfcDLqORELY3OS4gO5BpXsOPQbm36ZM9ko4BaoV9urX3kjRDT+391n0kMIhGZTD2YLk0wi3BF521IT5Gir1MwjjtnBzwPipfMtkhAX/BD9Cxc4JdhKx8sG1asm2TclrsJzWGeR2NpG66Mp+XBOdedSrANc8hF8Q7nFAAWYx2ra1wXZqlUFk="

        - secure: "YB7fy+/EGWoXCc9p6hIm71hCNss8EjD2rNF1ydQrr7jmtMwn6+fHNk0mF2Aoy3RVlh/Ekey+mayj906azkszqfR1mNUqsCby+HkljwAMG1uG0lqXMFngtvmC0g6KA3LzTlmlv55/0NjLDiE5801zqmrx8HKcdXsRBKeomiXaIfTKdzsWjG9tCrkFe+amY7ZW720+As0X45fVZ1fC6hY8TpmR7BGMJHxCXv8LaLxttbls413i/CH7VwSXfo97GfWv/fSS4embiW8E0cPRySgXXOhrAMgH+lVEML14IRUf6Hktl5sXeMcEBnBI66ix6934qhpbV2J+CsIALThdxyqCtYVotPOCGsaxoey9jmIeTKvhOn+PvuFpxkTz/sQHrG1bnecnPU+X+XqmO1gbXZaw4D/XioNuktiCeVD7HftobQoWtvwKSu8v3WnrLwuxvTsZDaobE6Rd59YoQj9x2Vr6CwSIn7eagozC1uxb1wFyeA7oBki3CpyhdHbaqCpZzyQfq/vW+WspfIcI0wmjn2KMp5WV/LoY7E4uyhvnssRiM/TFiK6sKoxGbkct5LMUz0WvuqtPifGnYRtmtyRISHbw8tRucqaJu7obzvTlToqlMpl7B0A1UTmj42oUZm++xdhWjxn6MMkWgd+7QYU7WBingXOKCy+kGrY6svlUkBPpOkY="

        - secure: "SNoIidr9nKnFS3bx57T15JsdHFBVJkrywfNP9LZSGjCSzXzHstuYZ+jvMwQ233Jyo48CxpCe9M9SMi+A9d07bqawcg/RtHOAMllZPcugmsJJx2kkqJVrG4FPpWVpX+8uS4ZGFN5Za6Uc48dZi/EOlAx+lF4yGbZfoCAsGssXQ27JpWvCelI1cYRdxuJlkFlEwMSm/MMEJd/CgHo3ZZfX+fY9AZp8L3kqGFDDMg6maRCgz/5VLFauFRwF6VN1gtDP/6PsYeK16FEiQfKr8ZJXA+KWYKElwueGlTtc+Egbbb3XEmSelHRZW4IhZ6ZOYdb3n4sQqkS9pfOb5lLldYEmyZ/K2S+Zk6X128YpqdMucgjsfmSzWbDHE6vONjMR3uYoYldvnrdy/eournEHu94dGeFI0OtcNXWlNWiCueg2BiH7LbZmtBw4VLmj8/VCUt7r/UfGAzI4brlqsPFlYhV/mIYz3AvQh4kAKPxQ+LIT59ExgW5wfdPXZn+gjNsfEuenXrFX0MQ4HyXBBXHZ6zBREQwP7Cz8coY7gXuqs6d8ufdt/2Y+ChOsnJEKrylOBPC+JFtUS2xPdJLldU9HyBKJXn1jLH5rMnJbEM4quwcooD5Ng60yqBRHpI4ZW46yxvTNSlcmcTxw5XoxMCd48M8jDL6GGNQGmngEUuD7VNRFFUM="


language: python

cache:
  apt: true
  directories:
  - $HOME/.cache/pip
  - $HOME/download
  - $HOME/.pip-cache
  - $HOME/gpg_install_prefix

python:
  - "2.7"
  - "3.5"
  - "3.6"
  - "3.7"
  - "3.8"
  - "nightly"

jobs:
  fast_finish: true
  allow_failures:
    - python: "nightly"

before_install:
  - pip install pip -U
  - pip install -r requirements.txt 
  - docker pull quay.io/pypa/manylinux2010_x86_64:latest

install:
  - | 
      MB_PYTHON_TAG=$(python -c "import setup; print(setup.MB_PYTHON_TAG)") 
      VERSION=$(python -c "import setup; print(setup.VERSION)") 
      echo "VERSION = $VERSION"
      echo "MB_PYTHON_TAG = $MB_PYTHON_TAG"
  - MB_PYTHON_TAG=$MB_PYTHON_TAG ./run_manylinux_build.sh
  - |
      BDIST_WHEEL_PATH=$(ls dist/*-$VERSION-$MB_PYTHON_TAG*.whl)
      echo "BDIST_WHEEL_PATH = $BDIST_WHEEL_PATH"
  - pip install $BDIST_WHEEL_PATH
    
script: 
  # Test the installed multibuild wheel
  - cd tests && travis_wait pytest && cd ..

after_success: 
    - codecov 
    - gpg --version
    - gpg2 --version
    - export GPG_EXECUTABLE=gpg2
    - openssl version
    - | 
        __heredoc__='''
        # Load or generate secrets
        source $(secret_loader.sh)
        echo $PYUTILS_TWINE_USERNAME
        echo $PYUTILS_TWINE_PASSWORD
        echo $PYUTILS_CI_GITHUB_SECRET

        # encrypt relevant travis variables (requires travis cli)
        #sudo apt install ruby ruby-dev -y
        #sudo gem install travis
        travis encrypt PYUTILS_TWINE_USERNAME=$PYUTILS_TWINE_USERNAME 
        travis encrypt PYUTILS_TWINE_PASSWORD=$PYUTILS_TWINE_PASSWORD  
        travis encrypt PYUTILS_CI_GITHUB_SECRET=$PYUTILS_CI_GITHUB_SECRET

        # HOW TO ENCRYPT YOUR SECRET GPG KEY
        IDENTIFIER=PyUtils
        KEYID=$(gpg --list-keys --keyid-format LONG "$IDENTIFIER" | head -n 2 | tail -n 1 | awk '{print $1}' | tail -c 9)
        echo "KEYID = $KEYID"

        # Export plaintext gpg public keys, private keys, and trust info
        mkdir -p dev
        gpg --armor --export-secret-keys $KEYID > dev/travis_secret_gpg_key.pgp
        gpg --armor --export $KEYID > dev/travis_public_gpg_key.pgp
        gpg --export-ownertrust > dev/gpg_owner_trust

        # Encrypt gpg keys and trust with travis secret
        TSP=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_public_gpg_key.pgp > dev/travis_public_gpg_key.pgp.enc
        TSP=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_secret_gpg_key.pgp > dev/travis_secret_gpg_key.pgp.enc
        TSP=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/gpg_owner_trust > dev/gpg_owner_trust.enc
        echo $KEYID > dev/public_gpg_key

        source $(secret_unloader.sh)

        # Look at what we did, clean up, and add it to git
        ls dev/*.enc
        rm dev/gpg_owner_trust dev/*.pgp
        git status
        git add dev/*.enc
        git add dev/public_gpg_key
        '''  # <hack vim "regex" parser> '
    - |
        # Install a more recent version of GPG
        # https://gnupg.org/download/
        export GPG_INSTALL_PREFIX=$HOME/gpg_install_prefix
        export LD_LIBRARY_PATH=$GPG_INSTALL_PREFIX/lib:$LD_LIBRARY_PATH
        export PATH=$GPG_INSTALL_PREFIX/bin:$PATH
        export CPATH=$GPG_INSTALL_PREFIX/include:$CPATH
        export GPG_EXECUTABLE=$GPG_INSTALL_PREFIX/bin/gpg
        ls $GPG_INSTALL_PREFIX
        ls $GPG_INSTALL_PREFIX/bin || echo "no bin"
        if [[ ! -f "$GPG_INSTALL_PREFIX/bin/gpg" ]]; then
            # try and have travis cache this
            mkdir -p $GPG_INSTALL_PREFIX
            echo $GPG_INSTALL_PREFIX
            OLD=$(pwd)
            cd $GPG_INSTALL_PREFIX
            pip install ubelt

            ERROR_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.36.tar.bz2',
                hash_prefix='6e5f853f77dc04f0091d94b224cab8e669042450f271b78d0ea0219',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            GCRYPT_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.8.5.tar.bz2',
                hash_prefix='b55e16e838d1b1208e7673366971ae7c0f9c1c79e042f41c03d1',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            KSBA_CRYPT_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libksba/libksba-1.3.5.tar.bz2',
                hash_prefix='60179bfd109b7b4fd8d2b30a3216540f03f5a13620d9a5b63f1f95',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            ASSUAN_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libassuan/libassuan-2.5.3.tar.bz2',
                hash_prefix='e7ccb651ea75b07b2e687d48d86d0ab83cba8e2af7f30da2aec',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            NTBLTLS_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/ntbtls/ntbtls-0.1.2.tar.bz2',
                hash_prefix='54468208359dc88155b14cba37773984d7d6f0f37c7a4ce13868d',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            NPTH_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/npth/npth-1.6.tar.bz2',
                hash_prefix='2ed1012e14a9d10665420b9a23628be7e206fd9348111ec751349b',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            GPG_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/gnupg/gnupg-2.2.17.tar.bz2',
                hash_prefix='a3cd094addac62b4b4ec1683005a2bec761ea2aacf6daf904316b',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")

            tar xjf $ERROR_FPATH
            tar xjf $GCRYPT_FPATH
            tar xjf $KSBA_CRYPT_FPATH
            tar xjf $ASSUAN_FPATH
            tar xjf $NTBLTLS_FPATH
            tar xjf $NPTH_FPATH
            tar xjf $GPG_FPATH
            (cd libgpg-error-1.36 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libgcrypt-1.8.5 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libksba-1.3.5 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libassuan-2.5.3 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd ntbtls-0.1.2 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd npth-1.6 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd gnupg-2.2.17 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            echo "GPG_EXECUTABLE = '$GPG_EXECUTABLE'"
            cd $OLD
        fi
    # Decrypt and import GPG Keys / trust
    - $GPG_EXECUTABLE --version
    - openssl version
    - $GPG_EXECUTABLE --list-keys
    - TSP=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - TSP=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
    - TSP=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_secret_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - $GPG_EXECUTABLE --list-keys
    - MB_PYTHON_TAG=$(python -c "import setup; print(setup.MB_PYTHON_TAG)")
    - VERSION=$(python -c "import setup; print(setup.VERSION)") 
    - |
        pip install twine
        if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
          pip install six pyopenssl ndg-httpsclient pyasn1 -U --user
          pip install requests[security] twine --user
        elfi
        if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          pip install six twine
          pip install --upgrade pyOpenSSL
        fi
    # Package and publish to pypi (if on release)
    - |
        echo "TRAVIS_BRANCH = $TRAVIS_BRANCH"

        KEYID=$(cat dev/public_gpg_key)
        echo "KEYID = '$KEYID'"
        if [[ "$TRAVIS_BRANCH" == "release" ]]; then
            # use set +x to log all intermediate commands 
            export CURRENT_BRANCH=$TRAVIS_BRANCH
            # TODO: reliable and secure gpg keys
            # Relies on a specific environmenmt being available 
            # git config --global user.signingkey D297D757
            # git config --local user.signingkey D297D757
            # git config --global gpg.program
            #
            TAG_AND_UPLOAD=yes
        else
            TAG_AND_UPLOAD=no
        fi
        MB_PYTHON_TAG=$MB_PYTHON_TAG \
            USE_GPG=True \
            GPG_KEYID=$KEYID \
            CURRENT_BRANCH=$TRAVIS_BRANCH \
            TWINE_PASSWORD=$PYUTILS_TWINE_PASSWORD \
            TWINE_USERNAME=$PYUTILS_TWINE_USERNAME \
            GPG_EXECUTABLE=$GPG_EXECUTABLE \
            DEPLOY_BRANCH=release \
            TAG_AND_UPLOAD=$TAG_AND_UPLOAD \
            ./publish.sh
